<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Mitchell Weggemans - Blog</title><link>https://MitchellWeg.github.io/</link><description>Recent content in Home on Mitchell Weggemans - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://MitchellWeg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Using a Hashmap</title><link>https://MitchellWeg.github.io/hashmap-implementation-and-usage/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/hashmap-implementation-and-usage/</guid><description>Preamble We, as programmers, want our algorithms to run as fast and as memory efficient as possible. This however, is hard. When do we know that we&amp;rsquo;ve hit the right solution? And how do we even measure that? In this post I&amp;rsquo;m trying to explain how to do exactly that.
The problem Suppose we have an array: [2, 7, 11, 15]. We want to find the indices of two numbers that add up to our target.</description></item><item><title>Using a REST API</title><link>https://MitchellWeg.github.io/using-a-rest-api/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/using-a-rest-api/</guid><description>What is REST? A RESTful API, mostly truncated to a REST API, is a way to communicate with your backend.
REST utilizes a number of methods. The most popular are: GET, POST, PUT, PATCH and DELETE
GET: most common method. This gets a resource from the service. POST: This creates a resource from on the service. PUT: This creates or replaces a resource on the service. The difference between PUT and POST is that calling it multiple times has the same effect, meaning its idempotent.</description></item><item><title>Using Docker Compose</title><link>https://MitchellWeg.github.io/using-docker-compose/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/using-docker-compose/</guid><description>Preamble Nowadays, everyone&amp;rsquo;s favorite buzzword is &amp;ldquo;microservices&amp;rdquo;, and that&amp;rsquo;s very logical. In a microservices architecture, its easy to scale up separate services as need be. It&amp;rsquo;s a proven architecture pioneered by companies as Netflix. However, sometimes it can be tedious to take care of the separate services. That is why Docker was invented.
What is Docker? Docker is a way of containerizing applications. A container is a way of &amp;ldquo;packing up&amp;rdquo; a piece of code along with its dependencies.</description></item><item><title>Using MLFlow to version your ML models [Part 1]</title><link>https://MitchellWeg.github.io/using-mlflow-part1/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/using-mlflow-part1/</guid><description>Preamble If you&amp;rsquo;ve doing anything with machine-learning in the past, you know how much of a pain it is to keep track of your models. When testing, you might have multiple versions of the same model just lying around, without knowing what parameters went into it to produce the result. MLFlow aims to tackle this issue.
Setting up MLFlow Before installing MLFlow, it is recommended to initialize a virtual environment first:</description></item><item><title>About</title><link>https://MitchellWeg.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/about/</guid><description>Who am I? My name is Mitchell. I&amp;rsquo;m a junior software engineer from the Netherlands with an interest in systems-programming, writing tools and scripts, and Artificial Intelligence.
In my short career, I&amp;rsquo;ve accumulated experience with a lot of programming languages. Most notably, I use Rust, Go, C# and Python almost daily. These 4 are by far my favourite languages. I&amp;rsquo;ve also racked up some experience with C, C++, Java, Haskell, Bash, web-languages like PHP (Laravel) and Javascript/Typescript.</description></item></channel></rss>