<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Mitchell Weggemans - Blog</title><link>https://MitchellWeg.github.io/</link><description>Recent content in Home on Mitchell Weggemans - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 18 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://MitchellWeg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Pumping Lemma and Ogden's Lemma</title><link>https://MitchellWeg.github.io/pumping-lemma/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/pumping-lemma/</guid><description>The Pumping Lemma Formally, the pumping lemma states:
Suppose L is a regular language. There exists a p (the pumping length) such that every w in L can be divided into three substrings, satisfying the following conditions:
$$ w = xyz $$
$$ |xy| \leq p $$
$$ |y| \geq 1 $$
The above says the length (denoted by the pipe symbol &amp;lsquo;|&amp;rsquo;) of the substring xy should be less than or equal to the pumping length, and the length of the substring y should be greater than or equal to 1.</description></item><item><title>Analyzing Women's World Cup statistics with Statsbomb</title><link>https://MitchellWeg.github.io/statsbomb/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/statsbomb/</guid><description>Preamble Data is the new gold. And luckily, there is an abundance to be found if you just look for it hard enough. Nowadays, it is used virtually everywhere.
Today we&amp;rsquo;re gonna take a look at the open dataset provided by Statsbomb. Within this dataset, a lot of goodies are waiting to be discovered.
In this post I&amp;rsquo;ll walk you through on how to import and visualize the data.
The Code First, lets import Statsbomb:</description></item><item><title>The Statistical Significance of the NFL Combine - Part 2</title><link>https://MitchellWeg.github.io/combine-stats-part-2/</link><pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/combine-stats-part-2/</guid><description>Preamble After preparing the data in the first part, we can now start exploring the data we&amp;rsquo;ve created. To make it a little bit easier to run the code, I created a GitHub repository that includes a docker-compose that sets up everything you need to have a database and a Grafana dashboard.
The code can be found here. The README has extensive instructions on how to run everything.
Data exploration College Stats Lets first create a graph to see which college created the most NFL players: SELECT COUNT(college) as player_count, college FROM draft GROUP BY college ORDER BY player_count DESC;</description></item><item><title>The Statistical Significance of the NFL Combine - Part 1</title><link>https://MitchellWeg.github.io/combine-stats-part-1/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/combine-stats-part-1/</guid><description>Preamble Probably everyone has at least a dream of playing a professional sport at least once in their lives. Unfortunately, this is only for the the best of the best, and it&amp;rsquo;s pretty uncommon for us common folk to ever surpass the semi-pro level.
While my own chess rating barely exceeds the 1500&amp;rsquo;s, it&amp;rsquo;s always fun to look up at the pro&amp;rsquo;s, and with football that is no different.
The NFL combine is a way for the future stars of the NFL to impress the scouts, and possibly get an edge on their draft stock.</description></item><item><title>Using a Hashmap</title><link>https://MitchellWeg.github.io/hashmap-implementation-and-usage/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/hashmap-implementation-and-usage/</guid><description>Preamble We, as programmers, want our algorithms to run as fast and as memory efficient as possible. This however, is hard. When do we know that we&amp;rsquo;ve hit the right solution? And how do we even measure that? In this post I&amp;rsquo;m trying to explain how to do exactly that.
The problem Suppose we have an array: [2, 7, 11, 15]. We want to find the indices of two numbers that add up to our target.</description></item><item><title>Using a REST API</title><link>https://MitchellWeg.github.io/using-a-rest-api/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/using-a-rest-api/</guid><description>What is REST? A RESTful API, mostly truncated to a REST API, is a way to communicate with your backend.
REST utilizes a number of methods. The most popular are: GET, POST, PUT, PATCH and DELETE
GET: most common method. This gets a resource from the service. POST: This creates a resource from on the service. PUT: This creates or replaces a resource on the service. The difference between PUT and POST is that calling it multiple times has the same effect, meaning its idempotent.</description></item><item><title>Using Docker Compose</title><link>https://MitchellWeg.github.io/using-docker-compose/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/using-docker-compose/</guid><description>Preamble Nowadays, everyone&amp;rsquo;s favorite buzzword is &amp;ldquo;microservices&amp;rdquo;, and that&amp;rsquo;s very logical. In a microservices architecture, its easy to scale up separate services as need be. It&amp;rsquo;s a proven architecture pioneered by companies as Netflix. However, sometimes it can be tedious to take care of the separate services. That is why Docker was invented.
What is Docker? Docker is a way of containerizing applications. A container is a way of &amp;ldquo;packing up&amp;rdquo; a piece of code along with its dependencies.</description></item><item><title>Using MLFlow to version your ML models [Part 1]</title><link>https://MitchellWeg.github.io/using-mlflow-part1/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/using-mlflow-part1/</guid><description>Preamble If you&amp;rsquo;ve doing anything with machine-learning in the past, you know how much of a pain it is to keep track of your models. When testing, you might have multiple versions of the same model just lying around, without knowing what parameters went into it to produce the result. MLFlow aims to tackle this issue.
Setting up MLFlow Before installing MLFlow, it is recommended to initialize a virtual environment first:</description></item><item><title/><link>https://MitchellWeg.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/projects/</guid><description>PGN-Parser A library to parse and convert PGN files to CSV or JSON, written in Rust. Available on GitHub Technologies used: Rust, CSV, JSON.
Pyschemer Database visualization tool, written in Python and available on GitHub and Pypi. Technologies used: Python, MonetDB/Postgres/MariaDB.</description></item><item><title/><link>https://MitchellWeg.github.io/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/resume/</guid><description>Mitchell Weggemans Education 2023-2026 (expected) MSc Software Engineering; Universiteit van Amsterdam, Amsterdam. 2019-2023 BSc Software Engineering; Hogeschool van Amsterdam, Amsterdam. Minor: Big Data &amp;amp; Machine Learning Minor: Mobile App Development 2016-2019 Assiocates Degree, Software Engineering; ROC Kop van Noord-Holland, Schagen. Experience 2024 - (current) AZ Alkmaar AZ Alkmaar is a professional football club based in Alkmaar, NH, Netherlands. They currently compete in the top flight of Dutch football, and are a regular competitor in European tournaments.</description></item><item><title>About</title><link>https://MitchellWeg.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/about/</guid><description>Who am I? My name is Mitchell. I&amp;rsquo;m a junior software engineer from the Netherlands with an interest in systems-programming, writing tools and scripts, and Artificial Intelligence / Machine Learning.
In my career, I&amp;rsquo;ve accumulated experience with a lot of programming languages. Most notably, I use Rust, Go, C# Julia, and Python almost daily. These 5 are by far my favourite languages. I&amp;rsquo;ve also racked up some experience with C, C++, Java, Haskell, Bash, web-languages like PHP (Laravel) and Javascript/Typescript.</description></item></channel></rss>