<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>big-o on Mitchell Weggemans - Blog</title><link>https://MitchellWeg.github.io/tags/big-o/</link><description>Recent content in big-o on Mitchell Weggemans - Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://MitchellWeg.github.io/tags/big-o/index.xml" rel="self" type="application/rss+xml"/><item><title>Using a Hashmap</title><link>https://MitchellWeg.github.io/hashmap-implementation-and-usage/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://MitchellWeg.github.io/hashmap-implementation-and-usage/</guid><description>Preamble We, as programmers, want our algorithms to run as fast and as memory efficient as possible. This however, is hard. When do we know that we&amp;rsquo;ve hit the right solution? And how do we even measure that? In this post I&amp;rsquo;m trying to explain how to do exactly that.
The problem Suppose we have an array: [2, 7, 11, 15]. We want to find the indices of two numbers that add up to our target.</description></item></channel></rss>